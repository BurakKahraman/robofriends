{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/errorBoundry.js","components/Clock.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","username","email","react_default","a","createElement","className","src","concat","alt","CardList","cardArray","robots","map","user","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","setState","Component","Clock","tick","time","Date","toLocaleTimeString","_this2","intervalID","setInterval","console","log","clearInterval","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_Clock","components_SearchBox","components_Scroll","errorBoundry","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0f77393.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Card = ({id,name,username,email}) => {\r\n  return(\r\n    <div className =\" tc bg-light-green dib pa3 br3 ma2 grow bw2 shadow-5\">\r\n    <img src = {`https://robohash.org/${id}200*200`} alt =\"robots\"/>\r\n    <div>\r\n    <h2>{name}</h2>\r\n    <h3>{username}</h3>\r\n    <p>{email}</p>\r\n    </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n  /*if(true){\r\n    throw new Error('Noooo!');\r\n  }*/\r\n  const cardArray = robots.map((user) => {\r\n    return (<Card key ={user.id}\r\n      id ={user.id} name ={user.name}\r\n      email ={user.email}\r\n      username ={user.username}/>);\r\n  });\r\n\r\n  return (\r\n  <div>\r\n    {cardArray}\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox= ({searchChange}) => {\r\n  return (\r\n    <div className=\"pa2 \">\r\n\r\n  <input\r\n  className=\"pa3 ba b--green bg-lightest-blue shadow-4 grow\"\r\n  type='search'\r\n  placeholder =\"Search Robots\"\r\n  onChange ={searchChange}/>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY : 'scroll',height :'500px'}}>\r\n     {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError : false\r\n    }\r\n  }\r\n\r\n componentDidCatch(){\r\n   this.setState({hasError : true});\r\n }\r\n render(){\r\n  if(this.state.hasError){\r\n    return <h1>Oooops That is not good</h1>\r\n  }\r\n  return this.props.children;\r\n }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React,{Component} from 'react';\r\n\r\nclass Clock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: new Date().toLocaleTimeString()\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.intervalID = setInterval(\r\n      () => this.tick(),\r\n      1000\r\n    );\r\n  }\r\n  componentWillUnmount() {\r\n    console.log('componentWillUnmount');\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  tick = () => {\r\n    this.setState({\r\n      time: new Date().toLocaleTimeString()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (<h2>It is {this.state.time}.</h2>);\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList.js';\r\n//import {robots} from './robots.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundry from '../components/errorBoundry.js';\r\nimport Clock from '../components/Clock.js';\r\n\r\n\r\nclass App extends Component {\r\nconstructor(props){\r\n  super(props);\r\n  this.state ={\r\n    robots :[],\r\n    searchfield:''\r\n  }\r\n}\r\n\r\nonSearchChange = (event) => {\r\n  this.setState({searchfield : event.target.value});\r\n}\r\n\r\n\r\n\r\ncomponentDidMount(){\r\n  const url = 'https://jsonplaceholder.typicode.com/users';\r\nfetch(url)\r\n  .then(response => response.json())\r\n  .then(users => {\r\n   this.setState({robots : users});\r\n });\r\n}\r\n\r\n\r\n  render(){\r\n    const {robots,searchfield} = this.state;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n\r\n    return !robots.length ?\r\n    <h1>Loading </h1> :\r\n    (\r\n      <div className =\"tc\">\r\n      <h1> RoboFriends</h1>\r\n      <Clock/>\r\n      <SearchBox searchChange = {this.onSearchChange}/>\r\n      <Scroll>\r\n      <ErrorBoundry>\r\n      <CardList robots = {filteredRobots}/>\r\n      </ErrorBoundry>\r\n      </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(\n                  <App />,\n   document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}